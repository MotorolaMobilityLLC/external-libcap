head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	97.05.04.05.34.32;	author morgan;	state Exp;
branches;
next	1.2;

1.2
date	97.04.28.01.01.20;	author morgan;	state Exp;
branches;
next	1.1;

1.1
date	97.04.21.04.34.04;	author morgan;	state Exp;
branches;
next	;


desc
@first take
@


1.3
log
@non void main
@
text
@/*
 * $Id: getcap.c,v 1.2 1997/04/28 01:01:20 morgan Exp morgan $
 *
 * Copyright (c) 1997 Andrew G. Morgan  <morgan@@parc.power.net>
 *
 * This displays the capabilities of a given file.
 */

#include <errno.h>
#include <stdio.h>
#include <string.h>
#include <sys/capability.h>

static void usage(void)
{
    fprintf(stderr,
	    "usage: getcap <filename> [<filename> ...]\n"
	    "\n"
	    "\tdisplays the capabilities on the queried file(s).\n"
	);
    exit(1);
}

int main(int argc, char **argv)
{
    char *result=NULL;

    if (argc < 2) {
	usage();
    }

    for ( ++argv; --argc > 0; ++argv ) {
	ssize_t length;
	cap_t cap_d;

	cap_d = cap_get_file(argv[0]);

	if (cap_d == NULL) {
	    fprintf(stderr,
		    "Failed to get capabilities for file `%s'\n"
		    " (%s)\n", argv[0], strerror(errno));
	    continue;
	}

	result = cap_to_text(cap_d, &length);

	fprintf(stderr, "Capabilities for `%s':\n%s\n", *argv, result);
    }

    return 0;
}

/*
 * $Log: getcap.c,v $
 * Revision 1.2  1997/04/28 01:01:20  morgan
 * update to allow more than one argument file
 *
 * Revision 1.1  1997/04/21 04:34:04  morgan
 * Initial revision
 *
 */
@


1.2
log
@update to allow more than one argument file
@
text
@d2 1
a2 1
 * $Id: getcap.c,v 1.1 1997/04/21 04:34:04 morgan Exp morgan $
d24 1
a24 1
void main(int argc, char **argv)
d50 1
a50 1
    exit(0);
d55 3
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * $Id$
d17 1
a17 1
	    "usage: getcap <filename>\n"
d19 1
a19 1
	    "\tdisplays the capabilities on the queried file\n"
a26 2
    ssize_t length;
    cap_t cap_d;
d28 1
a28 1
    if (argc != 2) {
d32 16
a47 6
    cap_d = cap_get_file(argv[1]);
    if (cap_d == NULL) {
	fprintf(stderr,
		"Failed to get capabilities for file %s\n"
		" (%s)\n", argv[1], strerror(errno));
	exit(1);
a49 3
    result = cap_to_text(cap_d, &length);

    fprintf(stderr, "%s", result);
d54 4
a57 1
 * $Log$
@
